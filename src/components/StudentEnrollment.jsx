import React, { useState, useRef } from "react";
import { Camera, Upload, User, X, CheckCircle, AlertCircle } from "lucide-react";

function StudentEnrollment() {
  const [step, setStep] = useState(1);
  const [studentId, setStudentId] = useState("");
  const [capturedPhotos, setCapturedPhotos] = useState([]);
  const [error, setError] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const videoRef = useRef(null);
  const streamRef = useRef(null);

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
      }
    } catch (err) {
      setError("Failed to access camera. Please ensure camera permissions are granted.");
      console.error("Camera error:", err);
    }
  };

  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
  };

  const capturePhoto = () => {
    if (!videoRef.current) return;

    const canvas = document.createElement('canvas');
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(videoRef.current, 0, 0);
    
    // Convert to base64
    const photo = canvas.toDataURL('image/jpeg');
    setCapturedPhotos([...capturedPhotos, photo]);
  };

  const handleFileUpload = (e) => {
    const files = Array.from(e.target.files);
    const readers = files.map(file => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.readAsDataURL(file);
      });
    });

    Promise.all(readers).then(results => {
      setCapturedPhotos([...capturedPhotos, ...results]);
    });
  };

  const removePhoto = (index) => {
    setCapturedPhotos(capturedPhotos.filter((_, i) => i !== index));
  };

  const handleSubmit = async () => {
    if (capturedPhotos.length === 0) {
      setError("Please capture at least one photo");
      return;
    }

    setIsProcessing(true);
    setError("");

    try {
      // Here you would process the photos to generate face embeddings
      // and send the data to your backend
      const faceData = {
        student_id: studentId,
        face_id: `face_${Date.now()}`, // In practice, this would be generated by your face recognition system
        embeddings: [], // This would be generated from the photos
      };

      const response = await fetch("http://127.0.0.1:8000/api/student-face-data", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(faceData),
      });

      if (!response.ok) {
        throw new Error("Failed to enroll face data");
      }

      setStep(3); // Move to success step
    } catch (err) {
      setError(err.message);
      console.error("Enrollment error:", err);
    } finally {
      setIsProcessing(false);
    }
  };

  // Clean up camera on unmount
  React.useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Face Enrollment</h1>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Add new face data to the recognition system
        </p>
      </div>

      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center justify-between relative">
          <div className="absolute left-0 right-0 top-1/2 h-0.5 bg-gray-200 dark:bg-gray-700 -translate-y-1/2"></div>
          {[1, 2, 3].map((number) => (
            <div key={number} className="relative z-10">
              <div className={`
                w-10 h-10 rounded-full flex items-center justify-center
                ${step === number 
                  ? 'bg-blue-600 text-white' 
                  : step > number 
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400'}
              `}>
                {step > number ? <CheckCircle className="w-5 h-5" /> : number}
              </div>
              <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                {number === 1 ? "Student ID" : number === 2 ? "Face Capture" : "Confirmation"}
              </p>
            </div>
          ))}
        </div>
      </div>

      {/* Error Message */}
      {error && (
        <div className="mb-6 p-4 rounded-lg bg-red-50 border border-red-200 flex items-start gap-3">
          <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
          <div>
            <h3 className="text-sm font-medium text-red-800">Error</h3>
            <p className="mt-1 text-sm text-red-700">{error}</p>
          </div>
        </div>
      )}

      {/* Step Content */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        {step === 1 && (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold dark:text-white">Enter Student ID</h2>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Student ID
              </label>
              <input
                type="text"
                value={studentId}
                onChange={(e) => setStudentId(e.target.value)}
                className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 dark:bg-gray-700"
                placeholder="Enter student ID"
                required
              />
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold dark:text-white">Capture Face Data</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Camera Capture */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium dark:text-white">Take Photo</h3>
                <div className="aspect-video bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden relative">
                  <video
                    ref={videoRef}
                    autoPlay
                    playsInline
                    className="w-full h-full object-cover"
                  />
                </div>
                <div className="flex space-x-4">
                  <button
                    onClick={startCamera}
                    className="flex-1 py-2 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Start Camera
                  </button>
                  <button
                    onClick={capturePhoto}
                    className="flex-1 py-2 px-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    Capture
                  </button>
                </div>
              </div>

              {/* File Upload */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium dark:text-white">Upload Photos</h3>
                <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6">
                  <div className="text-center">
                    <Upload className="mx-auto h-12 w-12 text-gray-400" />
                    <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                      Drag and drop photos or
                    </p>
                    <label className="mt-2 inline-block">
                      <span className="text-blue-600 hover:text-blue-700 cursor-pointer">
                        Browse files
                      </span>
                      <input
                        type="file"
                        className="hidden"
                        multiple
                        accept="image/*"
                        onChange={handleFileUpload}
                      />
                    </label>
                  </div>
                </div>
              </div>
            </div>

            {/* Captured Photos Preview */}
            {capturedPhotos.length > 0 && (
              <div>
                <h3 className="text-lg font-medium dark:text-white mb-4">Captured Photos</h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                  {capturedPhotos.map((photo, index) => (
                    <div key={index} className="relative aspect-square">
                      <img
                        src={photo}
                        alt={`Captured ${index + 1}`}
                        className="w-full h-full object-cover rounded-lg"
                      />
                      <button
                        onClick={() => removePhoto(index)}
                        className="absolute -top-2 -right-2 p-1 bg-red-100 text-red-600 rounded-full hover:bg-red-200"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {step === 3 && (
          <div className="space-y-6">
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-4">
                <CheckCircle className="w-8 h-8 text-green-600 dark:text-green-400" />
              </div>
              <h2 className="text-xl font-semibold dark:text-white">Enrollment Successful</h2>
              <p className="mt-2 text-gray-600 dark:text-gray-400">
                Face data has been successfully enrolled in the system
              </p>
            </div>
          </div>
        )}

        {/* Navigation Buttons */}
        <div className="mt-8 flex justify-between">
          <button
            onClick={() => setStep(Math.max(1, step - 1))}
            className={`px-6 py-2 rounded-lg border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${
              step === 1 ? "invisible" : ""
            }`}
          >
            Previous
          </button>
          {step < 3 && (
            <button
              onClick={() => {
                if (step === 1 && !studentId) {
                  setError("Please enter a student ID");
                  return;
                }
                if (step === 2) {
                  handleSubmit();
                } else {
                  setStep(step + 1);
                }
              }}
              disabled={isProcessing}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isProcessing ? (
                <div className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                  <span>Processing...</span>
                </div>
              ) : (
                step === 2 ? "Enroll Face" : "Next"
              )}
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

export default StudentEnrollment;
